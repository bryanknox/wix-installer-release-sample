name: draft-vtag-release-zip

on:
  workflow_dispatch: # Manual trigger.
  push:
    tags: ["v*"]

# Security: Restrict default permissions
permissions:
  actions: read    # Required for ci-checks workflow
  checks: write    # Required for ci-checks workflow
  contents: read

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry
  DOTNET_VERSION: '9.0.x'
  # Environment variables for release configuration
  CONFIGURATION: Release
  WPFAPP_ARTIFACT_NAME: sample-wpf-app
  WPFAPP_CSPROJ_PATH: src/SampleWpfApp/SampleWpfApp.csproj
  TARGET_RUNTIME: win-x64

jobs:

  #ci-checks:
  #  name: CI Checks
  #  uses: ./.github/workflows/ci-checks.yml

  validate-tag-job:
    name: Validate v-tag
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-vtag: ${{ steps.check-vtag.outputs.has-vtag }}
    steps:
      - name: üè∑Ô∏è Check if tag starts with 'v'
        id: check-vtag
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match '^refs/tags/v') {
            $tagName = $env:GITHUB_REF -replace '^refs/tags/', ''
            Write-Host "Tag name: $tagName"
            Write-Host "‚úÖ Tag '$tagName' starts with 'v'"
            "has-vtag=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            $tagName = $env:GITHUB_REF -replace '^refs/tags/', ''
            Write-Host "‚ùå Tag '$tagName' does not start with 'v'"
            Write-Host "GITHUB_REF: $env:GITHUB_REF"
            Write-Output "::notice title=Skipping Workflow::Tag is not a valid v-tag. ($env:GITHUB_REF)"
            "has-vtag=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

  build-publish-wpf-app-artifact-job:
    name: Build and publish WPF app artifact
    needs: validate-tag-job
    if: needs.validate-tag-job.outputs.has-vtag == 'true'
    runs-on: windows-2022
    timeout-minutes: 20
    steps:

      - name: ü§ò Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ dotnet publish WPF app artifacts
        shell: pwsh
        run: |
          dotnet publish `
            $env:WPFAPP_CSPROJ_PATH `
            --configuration $env:CONFIGURATION `
            --self-contained `
            --runtime $env:TARGET_RUNTIME `
            --output ${{ runner.temp }}/artifact-output `
            --verbosity minimal

      - name: üì¶ Create zip archive of WPF app
        shell: pwsh
        run: |
          $artifactPath = "${{ runner.temp }}/artifact-output"
          $zipPath = "${{ runner.temp }}/${{ env.WPFAPP_ARTIFACT_NAME }}.zip"
          Compress-Archive -Path "$artifactPath\*" -DestinationPath $zipPath -Force
          Write-Host "Created zip archive: $zipPath"

      - name: üîí Generate checksums (for zip file)
        shell: pwsh
        run: |
          $zipPath = "${{ runner.temp }}/${{ env.WPFAPP_ARTIFACT_NAME }}.zip"
          $externalChecksumsPath = "${{ runner.temp }}/checksums.txt"
          $hash = Get-FileHash -Path $zipPath -Algorithm SHA256
          "$($hash.Hash)  $(Split-Path $zipPath -Leaf)" | Out-File -FilePath $externalChecksumsPath -Encoding UTF8
          Write-Host "Generated checksums (for zip file):"
          Get-Content $externalChecksumsPath

      - name: üì§ Upload WPF app zip to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WPFAPP_ARTIFACT_NAME }}-zip
          path: ${{ runner.temp }}/${{ env.WPFAPP_ARTIFACT_NAME }}.zip
          retention-days: 7

      - name: üì§ Upload checksums to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: checksums
          path: ${{ runner.temp }}/checksums.txt
          retention-days: 7

  draft-release-wpf-app-job:
    name: Create draft release for WPF app
    runs-on: ubuntu-latest
    needs: build-publish-wpf-app-artifact-job
    timeout-minutes: 10
    permissions:
      contents: write
    steps:

      - name: ü§ò Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0  # Needs full depth for generating release notes

      - name: üì• Download zip artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WPFAPP_ARTIFACT_NAME }}-zip
          path: ${{ runner.temp }}/dist

      - name: üì• Download checksums artifact
        uses: actions/download-artifact@v4
        with:
          name: checksums
          path: ${{ runner.temp }}/dist

      - name: üîç Extract AssemblyName from WPF app project file
        id: extract_exe_name
        shell: pwsh
        run: |
          # Import the module
          Import-Module "./.github/workflows/pwsh/Get-AssemblyNameOrExit.psm1" -Force

          # Call the function and capture result
          $assemblyName = Get-AssemblyNameOrExit -ProjectPath $env:WPFAPP_CSPROJ_PATH

          # Output to GitHub Actions
          "wpf_exe_name=$assemblyName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Extracted WPF app exe name: $assemblyName"

      - name: üìù Generate release notes
        id: release_notes
        shell: pwsh
        run: |
          # Extract version from tag
          $version = $env:GITHUB_REF -replace '^refs/tags/v', ''
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          $artifactZipName = "${{ env.WPFAPP_ARTIFACT_NAME }}.zip"
          # Get the executable name from the extracted AssemblyName
          $appName = "${{ steps.extract_exe_name.outputs.wpf_exe_name }}"
          $exeName = "${{ steps.extract_exe_name.outputs.wpf_exe_name }}.exe"

          # Create release notes using StringBuilder for multiline content
          $sb = [System.Text.StringBuilder]::new()
          [void]$sb.AppendLine("## $appName v$version")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### What's New")
          [void]$sb.AppendLine("This release includes the latest features and improvements for $appName.")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### Download")
          [void]$sb.AppendLine("- **Windows (x64)**: Download the zip file from the assets below")
          [void]$sb.AppendLine("- **Checksums**: SHA256 checksums are provided for security:")
          [void]$sb.AppendLine("  - **checksums.txt**: Contains the checksum for the zip file itself")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### Verification")
          [void]$sb.AppendLine("1. Download both the zip file and checksums.txt")
          [void]$sb.AppendLine("2. Verify the zip file integrity: ``Get-FileHash $artifactZipName -Algorithm SHA256``")
          [void]$sb.AppendLine("3. Compare with the hash in checksums.txt")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### Installation")
          [void]$sb.AppendLine("1. Download and verify the zip file (see Verification above)")
          [void]$sb.AppendLine("2. Extract the zip file to your desired location")
          [void]$sb.AppendLine("3. Run ``$exeName`` to start the application")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### System Requirements")
          [void]$sb.AppendLine("- Windows 10 version 1809 or later")
          [void]$sb.AppendLine("- .NET 9.0 Runtime (included in self-contained build)")

          $sb.ToString() | Out-File -FilePath "release_notes.md" -Encoding utf8
          Write-Host "Generated release notes"

      - name: üöÄ Create draft release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          fail_on_unmatched_files: true
          name: ${{ steps.extract_exe_name.outputs.wpf_exe_name }} v${{ steps.release_notes.outputs.version }}
          tag_name: ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            ${{ runner.temp }}/dist/*
