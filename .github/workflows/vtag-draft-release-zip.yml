name: draft-vtag-release-zip

on:
  workflow_dispatch: # Manual trigger.
  push:
    tags: ["v*"]

# Security: Restrict default permissions
permissions:
  actions: read    # Required for ci-checks workflow
  checks: write    # Required for ci-checks workflow
  contents: read

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry
  DOTNET_VERSION: '9.0.x'
  # Environment variables for release configuration
  CONFIGURATION: Release
  WPF_APP_CSPROJ_PATH: src/SampleWpfApp/SampleWpfApp.csproj
  TARGET_RUNTIME: win-x64

jobs:

  get-version-job:
    name: Get version from v-tag job
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      release-version: ${{ steps.get-version.outputs.RELEASE_VERSION }}
    steps:
      - name: üè∑Ô∏è Get version from v-tag
        id: get-version
        shell: pwsh
        run: |
          $tagName = $env:GITHUB_REF -replace '^refs/tags/', ''
          $version = $tagName -replace '^v', ''
          Write-Host "GITHUB_REF: $env:GITHUB_REF"
          Write-Host "Tag name: $tagName"
          Write-Host "Release version: $version"
          # Output as workflow step variable.
          "RELEASE_VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

  build-publish-wpf-app-artifact-job:
    name: Build and publish WPF app artifact
    needs: get-version-job
    runs-on: windows-2022
    timeout-minutes: 20
    outputs:
      wpf-app-assembly-name: ${{ steps.get-wpf-app-names.outputs.WPF_APP_ASSEMBLY_NAME }}
      wpf-app-zip-artifact-name: ${{ steps.get-wpf-app-names.outputs.WPF_APP_ZIP_ARTIFACT_NAME }}
      wpf-app-zip-file-name: ${{ steps.get-wpf-app-names.outputs.WPF_APP_ZIP_FILE_NAME }}
    steps:

      - name: ü§ò Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üîç Get WPF app names from project
        id: get-wpf-app-names
        shell: pwsh
        run: |
          # Import the module
          Import-Module "./.github/workflows/pwsh/Get-AssemblyNameOrExit.psm1" -Force

          $assemblyName = Get-AssemblyNameOrExit -ProjectPath $env:WPF_APP_CSPROJ_PATH

          Write-Host "Extracted WPF app assembly name: $assemblyName"

          $version = "${{ needs.get-version-job.outputs.release-version }}"
          $artifactNameCore = "${assemblyName}-${version}-${env:TARGET_RUNTIME}"

          $zipArtifactName = "${artifactNameCore}-zip"
          $zipFileName = "${artifactNameCore}.zip"
          $zipFilePath = Join-Path ${{ runner.temp }} $zipFileName

          Write-Host "version: $version"
          Write-Host "zipArtifactName: $zipArtifactName"
          Write-Host "zipFileName : $zipFileName"
          Write-Host "zipFilePath : $zipFilePath"

          # Output as workflow step variables.

          "WPF_APP_ASSEMBLY_NAME=$assemblyName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          "WPF_APP_ZIP_ARTIFACT_NAME=$zipArtifactName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          "WPF_APP_ZIP_FILE_NAME=$zipFileName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          "WPF_APP_ZIP_FILE_PATH=$zipFilePath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: üì¶ dotnet publish WPF app
        shell: pwsh
        run: |
          $buildNumber = $env:GITHUB_RUN_NUMBER
          $semVersion = "${{ needs.get-version-job.outputs.release-version }}"
          $semVersionDotZero  = ($semVersion + ".0")
          $semVersionDotBuildNumber = "$semVersion.$buildNumber"

          Write-Host "semVersionDotZero: $semVersionDotZero"
          Write-Host "semVersionDotBuildNumber: $semVersionDotBuildNumber"

          dotnet publish `
            $env:WPF_APP_CSPROJ_PATH `
            --configuration $env:CONFIGURATION `
            --self-contained `
            --runtime $env:TARGET_RUNTIME `
            --output ${{ runner.temp }}/wpf-pub-output `
            --verbosity minimal `
            -p:Version=$semVersion `
            -p:AssemblyVersion=$semVersionDotZero  `
            -p:FileVersion=$semVersionDotZero  `
            -p:InformationalVersion=$semVersionDotBuildNumber `
            -p:IncludeSourceRevisionInInformationalVersion=true

      - name: üì¶ Create zip archive of WPF app
        shell: pwsh
        run: |
          $wpfAppPublishedOutputPath = "${{ runner.temp }}/wpf-pub-output"
          $zipPath = "${{ steps.get-wpf-app-names.outputs.WPF_APP_ZIP_FILE_PATH }}"
          Compress-Archive -Path "$wpfAppPublishedOutputPath\*" -DestinationPath $zipPath -Force
          Write-Host "Created zip archive: $zipPath"

      - name: üì§ Upload WPF app zip to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-wpf-app-names.outputs.WPF_APP_ZIP_ARTIFACT_NAME }}
          path: ${{ steps.get-wpf-app-names.outputs.WPF_APP_ZIP_FILE_PATH }}
          retention-days: 7

  draft-release-wpf-app-job:
    name: Create draft release for WPF app
    runs-on: ubuntu-latest
    needs: [get-version-job, build-publish-wpf-app-artifact-job]
    timeout-minutes: 10
    permissions:
      contents: write
    steps:

      - name: ü§ò Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0  # Needs full depth for generating release notes

      - name: üì• Download zip artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-publish-wpf-app-artifact-job.outputs.wpf-app-zip-artifact-name }}
          path: ${{ runner.temp }}/dist

      - name: üìù Generate release notes
        id: release-notes
        shell: pwsh
        run: |
          # Use the version extracted from the get-version-job
          $version = "${{ needs.get-version-job.outputs.release-version }}"

          $artifactZipName = "${{ needs.build-publish-wpf-app-artifact-job.outputs.wpf-app-zip-file-name }}"
          $appName = "${{ needs.build-publish-wpf-app-artifact-job.outputs.wpf-app-assembly-name }}"
          $exeName = "${{ needs.build-publish-wpf-app-artifact-job.outputs.wpf-app-assembly-name }}.exe"

          Write-Host "version: $version"
          Write-Host "artifactZipName: $artifactZipName"
          Write-Host "appName: $appName"
          Write-Host "exeName: $exeName"

          # Create release notes using StringBuilder for multiline content
          $sb = [System.Text.StringBuilder]::new()
          [void]$sb.AppendLine("## v$version $appName")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### What's New")
          [void]$sb.AppendLine("This release includes the latest features and improvements for $appName.")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### Download")
          [void]$sb.AppendLine("- **Windows (x64)**: Download the zip file from the assets below")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### Verification")
          [void]$sb.AppendLine("1. Download the ``$artifactZipName`` file from the GitHub release assets")
          [void]$sb.AppendLine("2. Copy the SHA256 for the ``$artifactZipName`` file from the GitHub release assets")
          [void]$sb.AppendLine("3. Verify the zip file integrity: ``Get-FileHash $artifactZipName -Algorithm SHA256``")
          [void]$sb.AppendLine("4. Compare with the hash returned with the SHA256 from GitHub")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### Installation")
          [void]$sb.AppendLine("1. Download and verify the zip file (see Verification above)")
          [void]$sb.AppendLine("2. Extract the zip file to your desired location")
          [void]$sb.AppendLine("3. Run ``$exeName`` to start the application")
          [void]$sb.AppendLine("")
          [void]$sb.AppendLine("### System Requirements")
          [void]$sb.AppendLine("- Windows 10 version 1809 or later")
          [void]$sb.AppendLine("- .NET 9.0 Runtime (included in self-contained build)")

          $sb.ToString() | Out-File -FilePath "release-notes.md" -Encoding utf8
          Write-Host "Generated release notes"

      - name: üöÄ Create draft release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          fail_on_unmatched_files: true
          name: v${{ needs.get-version-job.outputs.release-version }} ${{ needs.build-publish-wpf-app-artifact-job.outputs.wpf-app-assembly-name }}
          tag_name: ${{ github.ref_name }}
          body_path: release-notes.md
          files: |
            ${{ runner.temp }}/dist/*
